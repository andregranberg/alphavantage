{"ast":null,"code":"const {\n  isElement\n} = require(\"react-is\");\n\nconst ReactReconciler = require(\"react-reconciler\");\n/**\n * Context\n *\n * @type {Console}\n */\n\n\nconst context = typeof console.context === \"function\" ? console.context() : console;\n/**\n * Methods\n *\n * A list of method names available on the context that support substitutions.\n *\n * @type {string[]}\n */\n\nconst methods = [\"debug\", \"error\", \"info\", \"log\", \"warn\", \"group\", \"groupCollapsed\", \"trace\"];\n/**\n * Context overrides\n *\n * @type {Partial<Console>}\n */\n\nconst overrides = {}; // find any of the methods available that we can override to render instead.\n\nfor (const name in context) {\n  if (context.hasOwnProperty(name)) {\n    if (methods.includes(name)) {\n      overrides[name] = function () {\n        const root = arguments[0]; // only try to render when a single argument of type element is given\n\n        if (arguments.length === 1 && isElement(root)) {\n          return render(root, context, name);\n        } // fallback\n\n\n        return context[name].apply(context, arguments);\n      };\n    }\n  }\n} // export the context and overrides\n\n\nObject.assign(exports, context, overrides, {\n  render\n}); // INTERNALS BELOW\n// ////////////////////////////////////////////////////////////////////////////\n\n/**\n * The reconciler for the console.\n *\n * @type {ReactReconciler.Reconciler}\n */\n\nconst reconciler = ReactReconciler({\n  supportsPersistence: true,\n\n  createInstance(type, props) {\n    return {\n      type,\n      props,\n      style: Object.assign(styleForType(type, props), props.style),\n      children: []\n    };\n  },\n\n  createTextInstance(text) {\n    return text;\n  },\n\n  createContainerChildSet() {\n    return [];\n  },\n\n  appendChildToContainerChildSet(childSet, child) {\n    childSet.push(child);\n  },\n\n  appendInitialChild(parentInstance, child) {\n    parentInstance.children.push(child);\n  },\n\n  replaceContainerChildren(container, newChildren) {\n    const {\n      context,\n      method,\n      committed\n    } = container;\n\n    if (committed) {\n      return;\n    }\n\n    const subs = [];\n    const string = recursivelyConcatenate(newChildren, \"\", {}, subs);\n    context[method].apply(context, [string].concat(subs));\n  },\n\n  resetAfterCommit(containerInfo) {\n    containerInfo.committed = true;\n  },\n\n  // unknown required methods\n  finalizeContainerChildren() {},\n\n  finalizeInitialChildren() {},\n\n  getChildHostContext() {},\n\n  getPublicInstance() {},\n\n  getRootHostContext() {},\n\n  prepareForCommit() {},\n\n  shouldSetTextContent() {}\n\n});\n/**\n * Renders a given root element into the console.\n *\n * @param {ReactElement} root\n * @param {Console} [context=console]\n * @param {string} [method=\"log\"]\n * @returns {void}\n */\n\nfunction render(root, context = console, method = \"log\") {\n  const container = reconciler.createContainer({\n    context,\n    method,\n    committed: false\n  }, false, false);\n  reconciler.updateContainer(root, container, null, null);\n}\n/**\n * Concatenates a child set into a loggable string whilst populating the\n * necessary substitutions.\n *\n * @param {Array} children\n * @param {string} string\n * @param {object} style\n * @param {string[]} subs\n * @returns {string}\n */\n\n\nfunction recursivelyConcatenate(children, string, style, subs) {\n  for (let i = 0, l = children.length; i < l; ++i) {\n    const child = children[i];\n\n    if (typeof child === \"string\") {\n      subs.push(toCSSString(style));\n      string += \"%c\" + child;\n    } else {\n      const nextStyle = Object.assign({}, style, child.style);\n      let children = child.children;\n\n      switch (child.type) {\n        // break line = newline\n        case \"br\":\n          children = [\"\\n\"];\n          break;\n\n        case \"img\":\n          children = [\" \"];\n          break;\n      }\n\n      string = recursivelyConcatenate(children, string, nextStyle, subs); // append the href for anchor elements\n\n      if (child.type === \"a\" && child.props.href) {\n        string += \" \" + child.props.href;\n      }\n    }\n  }\n\n  return string;\n}\n/**\n * Return some default styles for a given element type.\n *\n * @param {string} type\n * @param {object} props\n * @returns {object}\n */\n\n\nfunction styleForType(type, props) {\n  switch (type) {\n    case \"a\":\n      return {\n        color: \"blue\"\n      };\n\n    case \"abbr\":\n      return {\n        textDecoration: \"underline dotted\",\n        fontStyle: \"italic\",\n        fontWeight: \"lighter\"\n      };\n\n    case \"b\":\n    case \"strong\":\n      return {\n        fontWeight: \"bolder\"\n      };\n\n    case \"del\":\n    case \"s\":\n      return {\n        textDecoration: \"line-through\"\n      };\n\n    case \"em\":\n    case \"i\":\n      return {\n        fontStyle: \"italic\"\n      };\n\n    case \"img\":\n      return {\n        fontSize: 0,\n        paddingLeft: typeof props.width === \"string\" ? props.width : props.width + \"px\",\n        paddingTop: typeof props.height === \"string\" ? props.height : props.height + \"px\",\n        backgroundImage: \"url(\" + props.src + \")\"\n      };\n\n    case \"ins\":\n    case \"u\":\n      return {\n        textDecoration: \"underline\"\n      };\n\n    case \"mark\":\n      {\n        return {\n          backgroundColor: \"yellow\",\n          color: \"black\"\n        };\n      }\n\n    case \"small\":\n      return {\n        fontSize: \"smaller\"\n      };\n\n    case \"sub\":\n      return {\n        fontSize: \"smaller\",\n        verticalAlign: \"sub\"\n      };\n\n    case \"sup\":\n      return {\n        fontSize: \"smaller\",\n        verticalAlign: \"super\"\n      };\n\n    default:\n      return {};\n  }\n}\n/**\n * Regular expression for camelcase CSS prop names.\n *\n * @type {RegExp}\n */\n\n\nconst CSS_PROP_NAME_REGEXP = /([A-Z])/g;\n/**\n * Convert a given style object into CSS string value.\n *\n * @param {object} style\n * @returns {string}\n */\n\nfunction toCSSString(style) {\n  let cssString = \"\";\n\n  for (const prop in style) {\n    if (style.hasOwnProperty(prop)) {\n      const cssProp = prop.replace(CSS_PROP_NAME_REGEXP, \"-$1\").toLowerCase();\n      cssString += cssProp + \":\" + style[prop] + \";\";\n    }\n  }\n\n  return cssString;\n}","map":{"version":3,"sources":["/home/andrey/Documents/React/8/node_modules/react-console/index.js"],"names":["isElement","require","ReactReconciler","context","console","methods","overrides","name","hasOwnProperty","includes","root","arguments","length","render","apply","Object","assign","exports","reconciler","supportsPersistence","createInstance","type","props","style","styleForType","children","createTextInstance","text","createContainerChildSet","appendChildToContainerChildSet","childSet","child","push","appendInitialChild","parentInstance","replaceContainerChildren","container","newChildren","method","committed","subs","string","recursivelyConcatenate","concat","resetAfterCommit","containerInfo","finalizeContainerChildren","finalizeInitialChildren","getChildHostContext","getPublicInstance","getRootHostContext","prepareForCommit","shouldSetTextContent","createContainer","updateContainer","i","l","toCSSString","nextStyle","href","color","textDecoration","fontStyle","fontWeight","fontSize","paddingLeft","width","paddingTop","height","backgroundImage","src","backgroundColor","verticalAlign","CSS_PROP_NAME_REGEXP","cssString","prop","cssProp","replace","toLowerCase"],"mappings":"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","sourcesContent":["const { isElement } = require(\"react-is\");\nconst ReactReconciler = require(\"react-reconciler\");\n\n/**\n * Context\n *\n * @type {Console}\n */\nconst context =\n  typeof console.context === \"function\" ? console.context() : console;\n\n/**\n * Methods\n *\n * A list of method names available on the context that support substitutions.\n *\n * @type {string[]}\n */\nconst methods = [\n  \"debug\",\n  \"error\",\n  \"info\",\n  \"log\",\n  \"warn\",\n  \"group\",\n  \"groupCollapsed\",\n  \"trace\",\n];\n\n/**\n * Context overrides\n *\n * @type {Partial<Console>}\n */\nconst overrides = {};\n\n// find any of the methods available that we can override to render instead.\nfor (const name in context) {\n  if (context.hasOwnProperty(name)) {\n    if (methods.includes(name)) {\n      overrides[name] = function () {\n        const root = arguments[0];\n\n        // only try to render when a single argument of type element is given\n        if (arguments.length === 1 && isElement(root)) {\n          return render(root, context, name);\n        }\n\n        // fallback\n        return context[name].apply(context, arguments);\n      };\n    }\n  }\n}\n\n// export the context and overrides\nObject.assign(exports, context, overrides, { render });\n\n// INTERNALS BELOW\n// ////////////////////////////////////////////////////////////////////////////\n\n/**\n * The reconciler for the console.\n *\n * @type {ReactReconciler.Reconciler}\n */\nconst reconciler = ReactReconciler({\n  supportsPersistence: true,\n\n  createInstance(type, props) {\n    return {\n      type,\n      props,\n      style: Object.assign(styleForType(type, props), props.style),\n      children: [],\n    };\n  },\n\n  createTextInstance(text) {\n    return text;\n  },\n\n  createContainerChildSet() {\n    return [];\n  },\n\n  appendChildToContainerChildSet(childSet, child) {\n    childSet.push(child);\n  },\n\n  appendInitialChild(parentInstance, child) {\n    parentInstance.children.push(child);\n  },\n\n  replaceContainerChildren(container, newChildren) {\n    const { context, method, committed } = container;\n    if (committed) {\n      return;\n    }\n\n    const subs = [];\n    const string = recursivelyConcatenate(newChildren, \"\", {}, subs);\n\n    context[method].apply(context, [string].concat(subs));\n  },\n\n  resetAfterCommit(containerInfo) {\n    containerInfo.committed = true;\n  },\n\n  // unknown required methods\n  finalizeContainerChildren() {},\n  finalizeInitialChildren() {},\n  getChildHostContext() {},\n  getPublicInstance() {},\n  getRootHostContext() {},\n  prepareForCommit() {},\n  shouldSetTextContent() {},\n});\n\n/**\n * Renders a given root element into the console.\n *\n * @param {ReactElement} root\n * @param {Console} [context=console]\n * @param {string} [method=\"log\"]\n * @returns {void}\n */\nfunction render(root, context = console, method = \"log\") {\n  const container = reconciler.createContainer(\n    {\n      context,\n      method,\n      committed: false,\n    },\n    false,\n    false\n  );\n  reconciler.updateContainer(root, container, null, null);\n}\n\n/**\n * Concatenates a child set into a loggable string whilst populating the\n * necessary substitutions.\n *\n * @param {Array} children\n * @param {string} string\n * @param {object} style\n * @param {string[]} subs\n * @returns {string}\n */\nfunction recursivelyConcatenate(children, string, style, subs) {\n  for (let i = 0, l = children.length; i < l; ++i) {\n    const child = children[i];\n\n    if (typeof child === \"string\") {\n      subs.push(toCSSString(style));\n      string += \"%c\" + child;\n    } else {\n      const nextStyle = Object.assign({}, style, child.style);\n      let children = child.children;\n\n      switch (child.type) {\n        // break line = newline\n        case \"br\":\n          children = [\"\\n\"];\n          break;\n\n        case \"img\":\n          children = [\" \"];\n          break;\n      }\n\n      string = recursivelyConcatenate(children, string, nextStyle, subs);\n\n      // append the href for anchor elements\n      if (child.type === \"a\" && child.props.href) {\n        string += \" \" + child.props.href;\n      }\n    }\n  }\n\n  return string;\n}\n\n/**\n * Return some default styles for a given element type.\n *\n * @param {string} type\n * @param {object} props\n * @returns {object}\n */\nfunction styleForType(type, props) {\n  switch (type) {\n    case \"a\":\n      return {\n        color: \"blue\",\n      };\n\n    case \"abbr\":\n      return {\n        textDecoration: \"underline dotted\",\n        fontStyle: \"italic\",\n        fontWeight: \"lighter\",\n      };\n\n    case \"b\":\n    case \"strong\":\n      return {\n        fontWeight: \"bolder\",\n      };\n\n    case \"del\":\n    case \"s\":\n      return {\n        textDecoration: \"line-through\",\n      };\n\n    case \"em\":\n    case \"i\":\n      return {\n        fontStyle: \"italic\",\n      };\n\n    case \"img\":\n      return {\n        fontSize: 0,\n        paddingLeft:\n          typeof props.width === \"string\" ? props.width : props.width + \"px\",\n        paddingTop:\n          typeof props.height === \"string\" ? props.height : props.height + \"px\",\n        backgroundImage: \"url(\" + props.src + \")\",\n      };\n\n    case \"ins\":\n    case \"u\":\n      return {\n        textDecoration: \"underline\",\n      };\n\n    case \"mark\": {\n      return {\n        backgroundColor: \"yellow\",\n        color: \"black\",\n      };\n    }\n\n    case \"small\":\n      return {\n        fontSize: \"smaller\",\n      };\n\n    case \"sub\":\n      return {\n        fontSize: \"smaller\",\n        verticalAlign: \"sub\",\n      };\n\n    case \"sup\":\n      return {\n        fontSize: \"smaller\",\n        verticalAlign: \"super\",\n      };\n\n    default:\n      return {};\n  }\n}\n\n/**\n * Regular expression for camelcase CSS prop names.\n *\n * @type {RegExp}\n */\nconst CSS_PROP_NAME_REGEXP = /([A-Z])/g;\n\n/**\n * Convert a given style object into CSS string value.\n *\n * @param {object} style\n * @returns {string}\n */\nfunction toCSSString(style) {\n  let cssString = \"\";\n  for (const prop in style) {\n    if (style.hasOwnProperty(prop)) {\n      const cssProp = prop.replace(CSS_PROP_NAME_REGEXP, \"-$1\").toLowerCase();\n      cssString += cssProp + \":\" + style[prop] + \";\";\n    }\n  }\n\n  return cssString;\n}\n"]},"metadata":{},"sourceType":"script"}